name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '20.11.1'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Cache Build Artifacts
      uses: actions/cache@v3
      with:
        path: build
        key: ${{ runner.os }}-build-${{ hashFiles('package.json', 'package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Install Dependencies
      run: npm ci

    - name: Compile Code and Generate Build Artifacts
      run: |
        npm run build || { echo "Build failed"; exit 1; }
        mkdir -p build
        cp -r dist/* build/
      
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: build/

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Restore Node.js modules cache
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-
        
    - name: Install Dependencies
      run: npm ci

    - name: Run Unit Tests and Capture Test Results
      run: |
        npm run test -- --coverage || { echo "Unit tests failed"; exit 1; }
        mkdir -p test-reports
        cp coverage/* test-reports/

    - name: Upload Test Reports
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: test-reports/
      
    - name: Run Integration Tests and Generate Reports
      run: |
        npm run integration-test || { echo "Integration tests failed"; exit 1; }
        mkdir -p integration-reports
        cp -r integration-test-reports/* integration-reports/
      
    - name: Upload Integration Test Reports
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-reports
        path: integration-reports/

  post-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Send Email Notification (for failures)
      run: |
        if [[ $GITHUB_RUN_STATUS == "failure" ]]; then
          echo "Sending email notification to team..."
          # You'd need to implement the actual notification step here
        fi
