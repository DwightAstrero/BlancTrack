name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '20.11.1'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Cache Build Artifacts
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-build-${{ hashFiles('package.json', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install Dependencies
        run: npm ci

      - name: Compile Code and Generate Build Artifacts
        run: |
          npm run build || { echo "Build failed"; exit 1; }
          mkdir -p build
          cp -r .next/* build/ || echo "No files found in .next directory to copy."
        
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build/

  test:
    runs-on: ubuntu-latest
    needs: build 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Node.js modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
          
      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests and Capture Test Results
        run: |
          npm run test -- --coverage --passWithNoTests || { echo "Unit tests failed"; exit 1; }
          mkdir -p test-reports
          if [ -d coverage ]; then
            cp -r coverage/* test-reports/ || echo "No coverage reports found."
          else
            echo "No coverage directory found."
          fi

      - name: Upload Test Reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: test-reports/

  integration-test:
    runs-on: ubuntu-latest
    needs: test  

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        run: npm ci

      - name: Start Application
        run: npm start & 

      - name: Run Integration Tests
        run: npm run integration-test  

      - name: Upload Integration Test Reports
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-reports
          path: integration-test-reports/

  post-test:
    runs-on: ubuntu-latest
    needs: [test, integration-test]  

    steps:
      - name: Send Email Notification (for failures)
        run: |
          if [[ $GITHUB_RUN_STATUS == "failure" ]]; then
            echo "Sending email notification to team..."
            # Replace with your actual notification command
          fi
